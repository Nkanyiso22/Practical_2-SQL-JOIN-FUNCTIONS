//0
//Testing the all columns names in my data

SELECT*
FROM
  "SHOPPINGS"."SHOPPING"."SHOPPINGS"
LIMIT
  10;
  -------------------------------------------------------
  -------------------------------------------------------
  //1. 
  //Find all records where Size is missing and the purchase_amount is   //greater than 50.  /   //Expected Columns: Customer ID, Size, purchase_amount, //Item Purchased
  SELECT Customer_ID,
  Size,
  Purchase_Amount,
  ITEM_PURCHASED
  FROM SHOPPING.SHOPPINGS
  WHERE Size IS NULL
  AND PURCHASE_AMOUNT >50;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//2.
//List the total number of purchases grouped by Season, treating NULL values as 'Unknown //Season'. Expected Columns: Season, Total Purchases

SELECT COALESCE(SEASON,'Unkown Season')AS SEASON,
COUNT(*)AS Total_Purchases and Review Rating is below 3.0. Expected //Columns: Customer ID, Promo Code Used, Review Rating, Item Purchased

SELECT Customer_ID,
Promo_Code_used,
Review_Rating,
FROM SHOPPING.SHOPPINGS
GROUP BY COALESCE (SEASON,'Unkown Season')
ORDER BY Total_Purchases DESC;
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
//3.
//Count how many customers used each Payment Method, treating NULLs as 'Not Provided'. //Expected Columns: Payment Method, Customer Count

SELECT COALESCE(PAYMENT_METHOD,'Not Provided')AS Payment_Method,
COUNT (DISTINCT CUSTOMER_ID)AS Customer_Count
FROM SHOPPING.SHOPPINGS
GROUP BY COALESCE(Payment_Method, 'Not Provided')
ORDER BY CUSTOMER_COUNT;
------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------

//4.
//Show customers where Promo Code Used is NULL
FROM SHOPPING.SHOPPINGS
WHERE PROMO_CODE_USED IS NULL
AND REVIEW_RATING < 3.0;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//5.
//Group customers by Shipping Type, and return the average purchase_amount, treating missing //values as 0. Expected Columns: Shipping Type, Average purchase_amount
SELECT Shipping_Type,
    AVG(Purchase_Amount) AS Average_Purchase
FROM SHOPPING.SHOPPINGS
WHERE Purchase_Amount IS NOT NULL
GROUP BY Shipping_Type
ORDER BY Average_Purchase DESC;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//6.
//Display the number of purchases per Location only for those with more than 5 purchases and //no NULL Payment Method. Expected Columns: Location, Total Purchases
SELECT LOCATION,
COUNT(*)AS Total_Purchases
FROM SHOPPING.SHOPPINGS
WHERE PAYMENT_METHOD IS NOT NULL
GROUP BY LOCATION
HAVING COUNT (*)>5
ORDER BY Total_Purchases DESC;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//7.
//Create a column Spender Category that classifies customers using CASE: 'High' if amount > //80, 'Medium' if BETWEEN 50 AND 80, 'Low' otherwise. Replace NULLs in purchase_amount with 0. //Expected Columns: Customer ID, purchase_amount, Spender Category.
SELECT  Customer_ID,
    Purchase_Amount,
    CASE 
        WHEN Purchase_Amount > 80 THEN 'High'
        WHEN Purchase_Amount BETWEEN 50 AND 80 THEN 'Medium'
        ELSE 'Low'
    END AS Spender_Category
FROM SHOPPING.SHOPPINGS
WHERE Purchase_Amount IS NOT NULL;

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//8.
//Find customers who have no Previous Purchases value but whose Color is not NULL. Expected //Columns: Customer ID, Color, Previous Purchases
SELECT Customer_ID,
        color,
        Previous_Purchases
FROM SHOPPING.SHOPPINGS
WHERE PREVIOUS_PURCHASES IS NULL
AND COLOR IS NOT NULL;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//9.
//Group records by Frequency of Purchases and show the total amount spent per group, treating //NULL frequencies as 'Unknown'. Expected Columns: Frequency of Purchases, Total purchase_amount
SELECT 
    COALESCE(Frequency_of_Purchases, 'Unknown') AS Frequency_of_Purchases,
    SUM(Purchase_Amount) AS Total_Purchase_Amount
FROM SHOPPING.SHOPPINGS
GROUP BY COALESCE(Frequency_of_Purchases, 'Unknown')
ORDER BY Total_Purchase_Amount DESC;

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//10.
//Display a list of all Category values with the number of times each was purchased, //excluding rows where Categoryis NULL. Expected Columns: Category, Total Purchases
SELECT Category,
COUNT(*)AS Total_Purchases
FROM SHOPPING.SHOPPINGS
WHERE Category IS NOT NULL
GROUP BY Category
ORDER BY Total_Purchases DESC;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//11.
//Return the top 5 Locations with the highest total purchase_amount, replacing NULLs in //amount with 0. Expected Columns: Location, Total purchase_amount
SELECT Location,
    SUM(Purchase_Amount) AS Total_Purchase_Amount
FROM SHOPPING.SHOPPINGS
WHERE Purchase_Amount IS NOT NULL
GROUP BY Location
ORDER BY Total_Purchase_Amount DESC
LIMIT 5;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//12.
//Group customers by Gender and Size, and count how many entries have a NULL Color. Expected //Columns: Gender, Size, Null Color Count
SELECT Gender,
    Size,
    COUNT(*) AS Null_Color_Count
FROM SHOPPING.SHOPPINGS
WHERE Color IS NULL
GROUP BY Gender, Size
ORDER BY Null_Color_Count DESC;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//13.
//Identify all Item Purchased where more than 3 purchases had NULL Shipping Type. Expected //Columns: Item Purchased, NULL Shipping Type Count
SELECT Item_Purchased,
    COUNT(*) AS Null_Shipping_Type_Count
FROM SHOPPING.SHOPPINGS
WHERE Shipping_Type IS NULL
GROUP BY Item_Purchased
HAVING COUNT(*) > 3
ORDER BY Null_Shipping_Type_Count DESC;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//14.
//Show a count of how many customers per Payment Method have NULL Review Rating. Expected //Columns: Payment Method, Missing Review Rating Count
SELECT Payment_Method,
    COUNT(*) AS Missing_Review_Rating_Count
FROM SHOPPING.SHOPPINGS
WHERE Review_Rating IS NULL
GROUP BY Payment_Method
ORDER BY Missing_Review_Rating_Count DESC;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//15.
//Group by Category and return the average Review Rating, replacing NULLs with 0, and filter //only where average is greater than 3.5. Expected Columns: Category, Average Review Rating.

SELECT Category,
    AVG(Review_Rating) AS Average_Review_Rating
FROM SHOPPING.SHOPPINGS
WHERE Review_Rating IS NOT NULL
GROUP BY Category
HAVING AVG(Review_Rating) > 3.5
ORDER BY Average_Review_Rating DESC;

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//16.
//List all Colors that are missing (NULL) in at least 2 rows and the average Age of customers //for those rows. Expected Columns: Color, Average Age
SELECT COALESCE(Color, 'Unknown') AS Color,
    AVG(Age) AS Average_Age
FROM SHOPPING.SHOPPINGS
WHERE Color IS NULL
GROUP BY COALESCE(Color, 'Unknown')
HAVING COUNT(*) >= 2
ORDER BY Average_Age DESC;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//17.
//Use CASE to create a column Delivery Speed: 'Fast' if Shipping Type is 'Express' or 'Next //Day Air', 'Slow' if 'Standard', 'Other' for all else including NULL. Then count how many //customers fall into each category. Expected Columns: Delivery Speed, Customer Count

SELECT CASE 
        WHEN Shipping_Type IN ('Express', 'Next Day Air') THEN 'Fast'
        WHEN Shipping_Type = 'Standard' THEN 'Slow'
        ELSE 'Other'
    END AS Delivery_Speed,
    COUNT(DISTINCT Customer_ID) AS Customer_Count
FROM SHOPPING.SHOPPINGS
GROUP BY 
    CASE 
        WHEN Shipping_Type IN ('Express', 'Next Day Air') THEN 'Fast'
        WHEN Shipping_Type = 'Standard' THEN 'Slow'
        ELSE 'Other'
    END
ORDER BY Customer_Count DESC;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//18.
//Find customers whose purchase_amount is NULL and whose Promo Code Used is 'Yes'. Expected //Columns: Customer ID, purchase_amount, Promo Code Used
SELECT Customer_ID,
    Purchase_Amount,
    Promo_Code_Used
FROM SHOPPING.SHOPPINGS
WHERE Purchase_Amount IS NULL
  AND Promo_Code_Used = 'Yes';
  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  //19.
//Group by Location and show the maximum Previous Purchases, replacing NULLs with 0, only //where the average rating is above 4.0. Expected Columns: Location, Max Previous Purchases, //Average Review Rating
SELECT Location,
    MAX(Previous_Purchases) AS Max_Previous_Purchases,
    AVG(CAST(Review_Rating AS DECIMAL(10,2))) AS Average_Review_Rating
FROM SHOPPING.SHOPPINGS
WHERE Previous_Purchases IS NOT NULL
GROUP BY Location
HAVING AVG(CAST(Review_Rating AS DECIMAL(10,2))) > 3.0
ORDER BY Average_Review_Rating DESC;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//20.
//Show customers who have a NULL Shipping Type but made a purchase in the range of 30 to 70 //USD. Expected Columns: Customer ID, Shipping Type, purchase_amount, Item Purchased

SELECT Customer_ID,
    Shipping_Type,
    Purchase_Amount,
    Item_Purchased
FROM SHOPPING.SHOPPINGS
WHERE Shipping_Type IS NULL
  AND Purchase_Amount BETWEEN 30 AND 70
ORDER BY Purchase_Amount ASC;





